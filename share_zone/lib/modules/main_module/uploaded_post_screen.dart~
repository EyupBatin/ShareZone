import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'package:share_zone/commons/ip4url.dart';
import 'package:share_zone/controller/user_controller.dart';
import 'package:share_zone/repository/token_preferences.dart';
import 'package:share_zone/screens/post_view/post_view.dart';

class UploadedPostScreen extends StatefulWidget {
  final bool isAll;

  const UploadedPostScreen({super.key, required this.isAll});

  @override
  _UploadedPostScreenState createState() => _UploadedPostScreenState();
}

class _UploadedPostScreenState extends State<UploadedPostScreen> {
  final RxBool isLoading = true.obs;
  final RxList<Map<String, dynamic>> imageData = <Map<String, dynamic>>[].obs;
  final UserController userController = Get.find();

  @override
  void initState() {
    super.initState();
    widget.isAll ? _fetchAllUserImages() : _fetchOneUserImages();
  }

  Future<void> _fetchAllUserImages() async {
    String? accessToken = await TokenPreferences().getAccessToken();

    try {
      final response = await http.get(
        Uri.parse('${Ip4Url.baseUrl}/api/download/all_users'),
        headers: {"Authorization": "Bearer $accessToken"},
      ).timeout(const Duration(milliseconds: 1500));

      if (response.statusCode == 200) {
        final jsonData = jsonDecode(response.body);
        List<Map<String, dynamic>> fetchedData = List<Map<String, dynamic>>.from(jsonData['files']);

        imageData.assignAll(fetchedData);
        userController.setUserPostsController(imageData.length);
      } else {
        print('Failed to load images: ${response.statusCode}');
      }
    } on http.ClientException catch (e) {
      print('ClientException: $e');
    } on TimeoutException {
      print('Timeout: Sunucu yanıt vermedi.');
    } catch (e) {
      print(e);
    } finally {
      isLoading.value = false;
    }
  }

  Future<void> _fetchOneUserImages() async {
    String loginUserId = userController.getLoginUserIdController().value;

    try {
      final response = await http
          .get(Uri.parse('${Ip4Url.baseUrl}/api/download/$loginUserId'))
          .timeout(const Duration(milliseconds: 1500));

      if (response.statusCode == 200) {
        final jsonData = jsonDecode(response.body);
        imageData.assignAll(List<Map<String, dynamic>>.from(jsonData['files']));
        userController.setUserPostsController(imageData.length);
      } else {
        print('Failed to load images: ${response.statusCode}');
      }
    } on http.ClientException catch (e) {
      print('ClientException: $e');
    } on TimeoutException {
      print('Timeout: Sunucu yanıt vermedi.');
    } catch (e) {
      print('Error: $e');
    } finally {
      isLoading.value = false;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Obx(() {
      if (isLoading.value) {
        return const Center(child: CircularProgressIndicator());
      } else if (imageData.isEmpty) {
        return const Center(
          child: Text(
            "You don't have any images",
            style: TextStyle(
              fontWeight: FontWeight.bold,
              fontSize: 17,
            ),
          ),
        );
      } else {
        return GridView.builder(
          padding: const EdgeInsets.all(8.0),
          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 3,
            crossAxisSpacing: 8,
            mainAxisSpacing: 8,
            childAspectRatio: 1,
          ),
          itemCount: imageData.length,
          itemBuilder: (context, index) {
            return GestureDetector(
              onTap: () {
                String selectedUserId = widget.isAll
                    ? imageData[index]['user_id'].toString() // Seçilen fotoğrafın user_id'sini al
                    : userController.getLoginUserIdController().value; // Mevcut kullanıcıyı kullan

                Get.to(PostView(
                  user_id: selectedUserId,
                  imageData: imageData,
                  initialIndex: index,
                ));
              },
              child: ClipRRect(
                borderRadius: BorderRadius.circular(10),
                child: Image.memory(
                  base64Decode(imageData[index]['base64']),
                  fit: BoxFit.cover,
                ),
              ),
            );
          },
        );
      }
    });
  }
}
